/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.main;

import gui.order.GuiKitchenOrderPane;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import utils.Pair;
import utils.Watch;

/**
 *
 * @author joako
 */
public class GuiKitchenMain extends javax.swing.JFrame {

    private int gridX;
    private int gridY;
    private static final int maxGridX = 5;

    /**
     * Creates new form GuiKitchenMain
     */
    public GuiKitchenMain() {
        initComponents();
        Watch watch = new Watch(0, 0, 0, 0);
        watch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        watch.setFont(new java.awt.Font("Arial", 1, 25));
        setExtendedState(MAXIMIZED_BOTH);
        watchPanel.add(watch, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new org.edisoncor.gui.panel.PanelImage();
        jPanel4 = new javax.swing.JPanel();
        ordersPanel = new javax.swing.JPanel();
        watchPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuLogin = new javax.swing.JMenu();
        menuItemNewLogin = new javax.swing.JMenuItem();
        menuItemLoggedUsers = new javax.swing.JMenuItem();
        menuConfig = new javax.swing.JMenu();
        menuItemGeneralConfig = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SISTEMA COCINA TIK");
        setMaximumSize(new java.awt.Dimension(1024, 768));

        jScrollPane1.setMaximumSize(new java.awt.Dimension(1024, 768));

        jPanel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fondo gris.png"))); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setOpaque(false);

        ordersPanel.setOpaque(false);
        ordersPanel.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(ordersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        watchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        watchPanel.setOpaque(false);
        watchPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(watchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(watchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        jScrollPane1.setViewportView(jPanel2);

        menuLogin.setText("Login");

        menuItemNewLogin.setText("Nuevo");
        menuItemNewLogin.setActionCommand("MenuItemNuevo");
        menuLogin.add(menuItemNewLogin);

        menuItemLoggedUsers.setText("Usuarios Logueados");
        menuLogin.add(menuItemLoggedUsers);

        jMenuBar1.add(menuLogin);

        menuConfig.setText("Configuracion");

        menuItemGeneralConfig.setText("Configuraciones Generales");
        menuItemGeneralConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemGeneralConfigActionPerformed(evt);
            }
        });
        menuConfig.add(menuItemGeneralConfig);

        jMenuBar1.add(menuConfig);

        jMenu1.setText("Acerca de");

        menuItemAbout.setText("Tec-Pro Software");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemAbout);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemGeneralConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGeneralConfigActionPerformed
        try {
            (new GuiConfig(this, true)).setVisible(true);
        } catch (RemoteException ex) {
            Logger.getLogger(GuiKitchenMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(GuiKitchenMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuItemGeneralConfigActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        (new GuiAbout(this, true)).setVisible(true);
    }//GEN-LAST:event_menuItemAboutActionPerformed

    /**
     *
     * @param newOrder
     */
    public void addElementToOrdersGrid(GuiKitchenOrderPane newOrder){
        if (gridX == maxGridX) {
            gridY++;
            gridX = 0;
        }
        GridBagConstraints constraints = new GridBagConstraints();
        constraints.gridx = gridX;
        constraints.gridy = gridY;
        constraints.anchor = GridBagConstraints.NORTHWEST;
        constraints.insets = new Insets(10, 10, 10, 10);
        gridX++;
        ordersPanel.add(newOrder, constraints);
        newOrder.setColor(0);
        ordersPanel.revalidate();
    }

    /**
     *
     * @param index
     */
    public void removeElementOfOrdersGrid(int index) {
        int aux = 0;
        while (index>=maxGridX){
            aux++;
            index = index-maxGridX;
        }
        System.out.println("removido posicion: "+index+" "+aux);
        //ordersPanel.remove(index);
        getOrdersPanel().remove(ordersPanel.getComponentAt(index, aux));
        ordersPanel.revalidate();
        ordersPanel.repaint();
    }

    /**
     *
     * @param index
     * @param orderDescription
     */
    public void updateElementOfOrdersGrid(int index, Pair<Map<String, Object>, List<Map>> order) {
        GuiKitchenOrderPane orderPane = (GuiKitchenOrderPane) getOrdersPanel().getComponent(index);
        
        final String desc;
        String aux = orderPane.getTxtOrderDescription().getText();
        for (Map m : order.second()) {
            aux = aux + m.get("name") + " x" + m.get("quantity") + "\n";
        }
        orderPane.getTxtOrderDescription().setText(aux);
        orderPane.setOrder(order);
        orderPane.revalidate();
        getOrdersPanel().revalidate();
    }

    /**
     *
     * @param index
     * @param color
     */
    public void setOrderColor(int index, Color color) {
        GuiKitchenOrderPane order = (GuiKitchenOrderPane) getOrdersPanel().getComponent(index);
        order.setBackground(color);
        order.revalidate();
        getOrdersPanel().revalidate();
    }

    /**
     *
     */
    public void cleanAllOrders() {
        ordersPanel.removeAll();
        gridX = 0;
        gridY = 0;
        ordersPanel.revalidate();
        ordersPanel.repaint();
        revalidate();
        repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiKitchenMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiKitchenMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiKitchenMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiKitchenMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GuiKitchenMain().setVisible(true);
            }
        });

    }

    /**
     *
     * @param lis
     */
    public void setActionListener(ActionListener lis) {
        this.getMenuItemNewLogin().addActionListener(lis);
        this.menuItemLoggedUsers.addActionListener(lis);
    }

    /**
     *
     * @param lis
     */
    public void setMouseListener(MouseListener lis) {
        this.getOrdersPanel().addMouseListener(lis);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private org.edisoncor.gui.panel.PanelImage jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuConfig;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemGeneralConfig;
    private javax.swing.JMenuItem menuItemLoggedUsers;
    private javax.swing.JMenuItem menuItemNewLogin;
    private javax.swing.JMenu menuLogin;
    private javax.swing.JPanel ordersPanel;
    private javax.swing.JPanel watchPanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Devuelve la barra de menú.
     *
     * @return the jMenuBar1
     */
    public javax.swing.JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    /**
     * Devuelve el botón de usuarios logueados.
     *
     * @return the menuItemLoggedUsers
     */
    public javax.swing.JMenuItem getMenuItemLoggedUsers() {
        return menuItemLoggedUsers;
    }

    /**
     * Devuelve el botón para loguear un nuevo usuario.
     *
     * @return the menuItemNewLogin
     */
    public javax.swing.JMenuItem getMenuItemNewLogin() {
        return menuItemNewLogin;
    }

    /**
     * Devuelve el menú que contiene las opciones de login y ver usuarios
     * logueados.
     *
     * @return the menuLogin
     */
    public javax.swing.JMenu getMenuLogin() {
        return menuLogin;
    }

    /**
     * Devuelve el JPanel donde deben ordenarse los pedidos.
     *
     * @return the ordersPanel
     */
    public javax.swing.JPanel getOrdersPanel() {
        return ordersPanel;
    }

    /**
     * Devuelve el panel del reloj.
     *
     * @return the watchPanel
     */
    public javax.swing.JPanel getWatchPanel() {
        return watchPanel;
    }

    /**
     *
     * @return indice de la columna en la ultima fila de la grilla contenedora de paneles
     */
    public int getGridX() {
        return gridX;
    }

    /**
     *
     * @return indice de la ultima fila de la grilla contenedora de paneles
     */
    public int getGridY() {
        return gridY;
    }

    /**
     *
     * @return indice del maximo anchor de la grilla contenedora de paneles
     */
    public static int getMaxGridX() {
        return maxGridX;
    }
  
}
